{{ if .Values.alert_trigger }}
---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: ct-alert-pipeline
spec:
  workspaces:
    - name: shared-workspace
    - name: model-workspace
  params:
    - name: APPLICATION_NAME
      type: string
      default: ""
    - name: PROJECT_NAME
      type: string
      default: ""
    - name: VERSION
      type: string
      default: ""
    - name: GIT_REF
      type: string
      default: "refs/heads/main"
    - name: GIT_BRANCH
      type: string
      default: "main"
    - name: GIT_COMMIT_AUTHOR
      type: string
      default: "Prometheus Alerting"
  tasks:
    # Clone jukebox repository
    - name: fetch-ds-pipeline-repository
      taskRef:
        resolver: cluster
        params:
          - name: kind
            value: task
          - name: name
            value: git-clone
          - name: namespace
            value: openshift-pipelines 
      workspaces:
        - name: output
          workspace: shared-workspace
      params:
        - name: URL
          value: "$(params.GIT_URL)"
        - name: REVISION
          value: "main"
        - name: SUBDIRECTORY
          value: "$(params.APPLICATION_NAME)/$(params.GIT_BRANCH)"
        - name: DELETE_EXISTING
          value: "true"
        - name: SSL_VERIFY
          value: "false"

    # Fetch Git Commit SHA
    - name: fetch-commit-hash
      taskRef:
        name: fetch-commit-hash
        kind: Task
      workspaces:
        - name: output
          workspace: shared-workspace
      params:
        - name: WORK_DIRECTORY
          value: "$(params.APPLICATION_NAME)/$(params.GIT_BRANCH)"
        - name: APPLICATION_NAME
          value: "$(params.APPLICATION_NAME)"
      runAfter:
        - fetch-ds-pipeline-repository

    # Execute Data Science Pipeline
    - name: execute-ds-pipeline
      taskRef:
        name: execute-ds-pipeline
        kind: Task
      workspaces:
        - name: output
          workspace: shared-workspace
      params:
        - name: WORK_DIRECTORY
          value: "$(params.APPLICATION_NAME)/$(params.GIT_BRANCH)/3-prod_datascience"
        - name: APPLICATION_NAME
          value: "$(params.APPLICATION_NAME)"
        - name: GIT_SHORT_REVISION
          value: "$(params.VERSION)-$(tasks.fetch-commit-hash.results.GIT_SHORT_REVISION)"
      runAfter:
        - fetch-commit-hash

    # Containerize the model (modelcar)
    - name: build-modelcar
      taskRef:
        name: build-modelcar
        kind: Task
      runAfter:
        - execute-ds-pipeline
      workspaces:
        - name: output
          workspace: model-workspace
      params:
        - name: APPLICATION_NAME
          value: "$(params.APPLICATION_NAME)"
        - name: VERSION
          value: "$(params.VERSION)-$(tasks.fetch-commit-hash.results.GIT_SHORT_REVISION)"
        - name: PROJECT_NAME
          value: {{ .Values.USER_NAME }}

    # Fetch GitOps repository
    - name: fetch-gitops-repository
      taskRef:
        resolver: cluster
        params:
          - name: kind
            value: task
          - name: name
            value: git-clone
          - name: namespace
            value: openshift-pipelines 
      workspaces:
        - name: output
          workspace: shared-workspace
      params:
        - name: URL
          value: "https://gitea-gitea.{{ .Values.cluster_domain }}/{{ .Values.USER_NAME }}/mlops-gitops.git"
        - name: REVISION
          value: "main"
        - name: SUBDIRECTORY
          value: "mlops-gitops/main"
        - name: DELETE_EXISTING
          value: "true"
        - name: SSL_VERIFY
          value: "false"
      runAfter:
        - build-modelcar

    # Update model version in Git
    - name: deploy-test
      taskRef:
        name: deploy-or-raise-pr
        kind: Task
      runAfter:
        - fetch-gitops-repository
      workspaces:
        - name: output
          workspace: shared-workspace
      params:
        - name: APPLICATION_NAME
          value: "$(params.APPLICATION_NAME)"
        - name: VERSION
          value: "$(params.VERSION)-$(tasks.fetch-commit-hash.results.GIT_SHORT_REVISION)"
        - name: WORK_DIRECTORY
          value: "mlops-gitops/main/model-deployments/"
        - name: DEPLOY_ENVIRONMENT
          value: "test"
        - name: PROJECT_NAME
          value: {{ .Values.USER_NAME }}
          
    # update model metadata
    - name: update-model-metadata
      taskRef:
        name: update-model-metadata
        kind: Task
      runAfter:
        - deploy-test
      params:
        - name: APPLICATION_NAME
          value: "$(params.APPLICATION_NAME)"
        - name: VERSION
          value: "$(params.VERSION)-$(tasks.fetch-commit-hash.results.GIT_SHORT_REVISION)"
        - name: DEPLOY_ENVIRONMENT
          value: "test"
        - name: PROJECT_NAME
          value: {{ .Values.USER_NAME }}
        - name: KFP_RUN_ID
          value: "$(tasks.execute-ds-pipeline.results.KFP_RUN_ID)"
        - name: GIT_COMMIT_AUTHOR
          value: "$(params.GIT_COMMIT_AUTHOR)"

  results:
    - name: GIT_SHORT_REVISION
      description: Short commit hash
      value: "$(tasks.fetch-commit-hash.results.GIT_SHORT_REVISION)"
    - name: KFP_RUN_ID
      description: Run ID of the Data Science Pipeline
      value: "$(tasks.execute-ds-pipeline.results.KFP_RUN_ID)"
{{- end }}